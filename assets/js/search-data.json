{
  
    
        "post0": {
            "title": "Title",
            "content": "About me . Rohit Pruthi, Decision Scientist @ Rolls Royce Data Labs . Correlation . . The number of hours put in to study is correlated to marks. Net caloric intake to weight is possibly high correlation. We can infer these because in this case causation is being discussed. However, in complex multi-variable problems, causation in not always clear. . If you have used data science or statistics earlier, you would have heard the caution &#39;Correlation is not causation&#39;. . In practice, some time correlation is not even the correct measure of dependence. We need to understand how it is defined before making use and there are some experiments in better forms of looking at dependence. The intent of this video is to look through and introduce one such example. . PPS - Predictive Power Score uses decision trees as the basis of calculation relationship between variables . A quick mention about Jupyter Notebooks which is what you are seeing right now. . Import libraries . import pandas as pd import numpy as np import seaborn as sns plt.style.use(&#39;ggplot&#39;) . Install ppscore - Predictive Power Score . !pip install ppscore . Collecting ppscore Downloading ppscore-0.0.2.tar.gz (38 kB) Building wheels for collected packages: ppscore Building wheel for ppscore (setup.py): started Building wheel for ppscore (setup.py): finished with status &#39;done&#39; Created wheel for ppscore: filename=ppscore-0.0.2-py2.py3-none-any.whl size=9634 sha256=bd3bcb391f9edd198f8fcb3c1016596ec89ff96a9add9c443947ed06cf8203fd Stored in directory: c: users home appdata local pip cache wheels bb 35 a9 b66dcda859b25d96509b26b47878164067f49ac1feb2a555ac Successfully built ppscore Installing collected packages: ppscore Successfully installed ppscore-0.0.2 . import ppscore as pps . Create data for exploration . df = pd.DataFrame() df[&quot;x&quot;] = np.random.uniform(-2, 2, 1_000_000) df[&quot;error&quot;] = np.random.uniform(-0.5, 0.5, 1_000_000) df[&quot;y&quot;] = (df[&quot;x&quot;]*df[&quot;x&quot;]) + df[&quot;error&quot;] sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9d295dc8&gt; . X and Y are obviously related, there is an exponential relationship between them. Let us see how correlation and pps handle this . Check correlation . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa1385ec8&gt; . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(method=&#39;spearman&#39;), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9d299888&gt; . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(method=&#39;kendall&#39;), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa0cade88&gt; . The additional step of pair plotting . sns.pairplot(df[[&#39;x&#39;,&#39;y&#39;]]) . &lt;seaborn.axisgrid.PairGrid at 0x23fa0d50288&gt; . Using pps . df_matrix = pps.matrix(df[[&#39;x&#39;,&#39;y&#39;]]) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa116e3c8&gt; . Why would x vs y be 0, let us look into pps.score . ppscore.score(df, x=&#39;y&#39;, y=&#39;x&#39;, task=None, sample=5000) . {&#39;x&#39;: &#39;y&#39;, &#39;y&#39;: &#39;x&#39;, &#39;task&#39;: &#39;regression&#39;, &#39;ppscore&#39;: 0.0347825646932195, &#39;metric&#39;: &#39;mean absolute error&#39;, &#39;baseline_score&#39;: 1.0072856030153572, &#39;model_score&#39;: 0.9722496263639269, &#39;model&#39;: DecisionTreeRegressor(ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=&#39;deprecated&#39;, random_state=None, splitter=&#39;best&#39;)} . What if we flip to square root of x? . df = pd.DataFrame() df[&quot;x&quot;] = np.random.uniform(-2, 2, 1_000_000) df[&quot;error&quot;] = np.random.uniform(-0.1, 0.1, 1_000_000) df[&quot;y&quot;] = np.sqrt(abs(df[&quot;x&quot;])) + df[&quot;error&quot;] sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa122e288&gt; . df_matrix = pps.matrix(df[[&#39;x&#39;,&#39;y&#39;]]) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa126e208&gt; . Still the same 0 between y and x. . This is because of the large variation in x for a given y (see below chart and horizontal line) . sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;).axhline(1.0) . &lt;matplotlib.lines.Line2D at 0x23fa126e988&gt; . Looking through some baseball data (source - https://www2.stetson.edu/~jrasp/research/localcorrelation.htm) . example3 = pd.read_csv(&#39;Example3.csv&#39;, header=None) . example3.columns=[&#39;Pitching&#39;, &#39;Defense&#39;, &#39;Hitting&#39;, &#39;Win Percentage&#39;] . example3.head() . Pitching Defense Hitting Win Percentage . 0 0.487013 | 3.98 | 0.975 | 0.692104 | . 1 0.402597 | 4.94 | 0.969 | 0.717472 | . 2 0.610390 | 3.90 | 0.967 | 0.809883 | . 3 0.464052 | 4.40 | 0.964 | 0.814853 | . 4 0.640523 | 3.82 | 0.965 | 0.835017 | . sns.heatmap(example3.corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f96d54488&gt; . sns.pairplot(example3) . &lt;seaborn.axisgrid.PairGrid at 0x23f98d6bcc8&gt; . sns.heatmap(pps.matrix(example3), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f992ef708&gt; . While there is high correlation score, individually neither of the variables would be able to determine the win rate. Or as the coaches say, You Gotta do one good and everything else decent. . Looking at categorical data . iris = sns.load_dataset(&#39;iris&#39;) iris.head() . sepal_length sepal_width petal_length petal_width species . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | . Can you predict the species of flower, with its parameters . sns.heatmap(iris.corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9bbd7348&gt; . Notice, only numerical variables get picked up in correlation, let us check with pps . df_matrix = pps.matrix(iris) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa7aa5b48&gt; . Better, we can see species is almost entirely predictable by petal width and length, not so much by sepal parameters . sns.pairplot(iris, hue=&#39;species&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x23f9bbd7248&gt; . That was helpful going into a model. . PPS is not a sliver bullet, and neither is correlation. In fact, there are no silver bullets, except ofcourse actual silver bullets. . Anyway, We need to use them both in conjunction to get the best outcome. . https://github.com/8080labs/ppscore Check for more details .",
            "url": "https://aigym.github.io/aigym-workout/2020/06/19/pps.html",
            "relUrl": "/2020/06/19/pps.html",
            "date": " • Jun 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aigym.github.io/aigym-workout/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aigym.github.io/aigym-workout/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aigym.github.io/aigym-workout/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aigym.github.io/aigym-workout/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}