{
  
    
        "post0": {
            "title": "Plotting",
            "content": "using Pkg Pkg.add(&quot;Plots&quot;) using Plots . Updating registry at `C: Users Home .julia registries General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Updating `C: Users Home .julia environments v1.4 Project.toml` [no changes] Updating `C: Users Home .julia environments v1.4 Manifest.toml` [no changes] ┌ Info: Precompiling Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] └ @ Base loading.jl:1260 . . One of the advantages to Plots.jl is that it allows you to seamlessly change backends. In this notebook, we&#39;ll try out the gr() and plotlyjs() backends. . In the name of scientific inquiry, let&#39;s use this notebook to examine the relationship between the global temperature and the number of pirates between roughly 1860 and 2000. . globaltemperatures = [14.4, 14.5, 14.8, 15.2, 15.5, 15.8] numpirates = [45000, 20000, 15000, 5000, 400, 17]; . Plots supports multiple backends — that is, libraries that actually do the drawing — all with the same API. To start out, let&#39;s try the GR backend. You choose it with a call to gr(): . gr() . Plots.GRBackend() . and now we can use commands like plot and scatter to generate plots. . plot(numpirates, globaltemperatures, label=&quot;line&quot;) scatter!(numpirates, globaltemperatures, label=&quot;points&quot;) . The ! at the end of the scatter! function name makes scatter! a mutating function, indicating that the scattered points will be added onto the pre-existing plot. . In contrast, see what happens when you replace scatter! in the above with the non-mutating function scatter. . Next, let&#39;s update this plot with the xlabel!, ylabel!, and title! commands to add more information to our plot. . xlabel!(&quot;Number of Pirates [Approximate]&quot;) ylabel!(&quot;Global Temperature (C)&quot;) title!(&quot;Influence of pirate population on global warming&quot;) . This still doesn&#39;t look quite right. The number of pirates has decreased since 1860, so reading the plot from left to right is like looking backwards in time rather than forwards. Let&#39;s flip the x axis to better see how pirate populations have caused global temperatures to change over time! . xflip!() . And there we have it! . Note: We&#39;ve had some confusion about this exercise. :) This is a joke about how people often conflate correlation and causation. . Without changing syntax, we can create this plot with the UnicodePlots backend . Pkg.add(&quot;UnicodePlots&quot;) unicodeplots() . Resolving package versions... Installed UnicodePlots ─ v1.1.0 Updating `C: Users Home .julia environments v1.4 Project.toml` [b8865327] + UnicodePlots v1.1.0 Updating `C: Users Home .julia environments v1.4 Manifest.toml` [b8865327] + UnicodePlots v1.1.0 ┌ Info: Precompiling UnicodePlots [b8865327-cd53-5732-bb35-84acbb429228] └ @ Base loading.jl:1260 . Plots.UnicodePlotsBackend() . plot(numpirates, globaltemperatures, label=&quot;line&quot;) scatter!(numpirates, globaltemperatures, label=&quot;points&quot;) xlabel!(&quot;Number of Pirates [Approximate]&quot;) ylabel!(&quot;Global Temperature (C)&quot;) title!(&quot;Influence of pirate population on global warming&quot;) . And notice how this second plot differs from the first! Using text like this is a little silly in a Jupyter notebook where we have fancy drawing capabilities, but it can be very useful for quick and dirty visualization in a terminal. . Exercises . 8.1 . Given . x = -10:10 . plot y vs. x for $y = x^2$. You may want to change backends back again. . 8.2 . Execute the following code . p1 = plot(x, x) p2 = plot(x, x.^2) p3 = plot(x, x.^3) p4 = plot(x, x.^4) plot(p1, p2, p3, p4, layout = (2, 2), legend = false) . and then create a $4x1$ plot that uses p1, p2, p3, and p4 as subplots. .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/17/Plotting.html",
            "relUrl": "/2020/07/17/Plotting.html",
            "date": " • Jul 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Julia is fast",
            "content": "Outline of this notebook . Define the sum function | Implementations &amp; benchmarking of sum in... C (hand-written) | C (hand-written with -ffast-math) | python (built-in) | python (numpy) | python (hand-written) | Julia (built-in) | Julia (hand-written) | Julia (hand-written with SIMD) | . | Summary of benchmarks | . sum: An easy enough function to understand . Consider the sum function sum(a), which computes $$ mathrm{sum}(a) = sum_{i=1}^n a_i, $$ where $n$ is the length of a. . a = rand(10^7) # 1D vector of random numbers, uniform on [0,1) . 10000000-element Array{Float64,1}: 0.10251712333064189 0.15664657397668247 0.8702319998528238 0.9539539926524228 0.9737370247684902 0.6975773467174782 0.5100099944150349 0.19423165967370792 0.9345001468761105 0.6978391397534582 0.5594818798599315 0.38142256250643647 0.6647733162702012 ⋮ 0.5069800190998628 0.585248252119136 0.3099867704287782 0.11900182482525756 0.05143227260128613 0.1598031892874665 0.7810893612852063 0.8330185483543266 0.9481261222197384 0.6235224455863548 0.8671254289396593 0.17421351026220133 . sum(a) . 4.999307285764241e6 . The expected result is 0.5 * 10^7, since the mean of each entry is 0.5 . Benchmarking a few ways in a few languages . @time sum(a) . 0.013606 seconds (1 allocation: 16 bytes) . 4.999307285764241e6 . @time sum(a) . 0.012826 seconds (1 allocation: 16 bytes) . 4.999307285764241e6 . @time sum(a) . 0.007343 seconds (1 allocation: 16 bytes) . 4.999307285764241e6 . The @time macro can yield noisy results, so it&#39;s not our best choice for benchmarking! . Luckily, Julia has a BenchmarkTools.jl package to make benchmarking easy and accurate: . using Pkg Pkg.add(&quot;BenchmarkTools&quot;) . Updating registry at `C: Users Home .julia registries General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Installed OpenSSL_jll ──── v1.1.1+4 Installed Zlib_jll ─────── v1.2.11+14 Installed BenchmarkTools ─ v0.5.0 Updating `C: Users Home .julia environments v1.4 Project.toml` [6e4b80f9] + BenchmarkTools v0.5.0 Updating `C: Users Home .julia environments v1.4 Manifest.toml` [6e4b80f9] + BenchmarkTools v0.5.0 [458c3c95] ↑ OpenSSL_jll v1.1.1+3 ⇒ v1.1.1+4 [83775a58] ↑ Zlib_jll v1.2.11+12 ⇒ v1.2.11+14 . . using BenchmarkTools . 1. The C language . C is often considered the gold standard: difficult on the human, nice for the machine. Getting within a factor of 2 of C is often satisfying. Nonetheless, even within C, there are many kinds of optimizations possible that a naive C writer may or may not get the advantage of. . The current author does not speak C, so he does not read the cell below, but is happy to know that you can put C code in a Julia session, compile it, and run it. Note that the &quot;&quot;&quot; wrap a multi-line string. . using Libdl C_code = &quot;&quot;&quot; #include &lt;stddef.h&gt; double c_sum(size_t n, double *X) { double s = 0.0; for (size_t i = 0; i &lt; n; ++i) { s += X[i]; } return s; } &quot;&quot;&quot; const Clib = tempname() # make a temporary file # compile to a shared library by piping C_code to gcc # (works only if you have gcc installed): open(`gcc -fPIC -O3 -msse3 -xc -shared -o $(Clib * &quot;.&quot; * Libdl.dlext) -`, &quot;w&quot;) do f print(f, C_code) end # define a Julia function that calls the C function: c_sum(X::Array{Float64}) = ccall((&quot;c_sum&quot;, Clib), Float64, (Csize_t, Ptr{Float64}), length(X), X) . c_sum(a) . c_sum(a) ≈ sum(a) # type approx and then &lt;TAB&gt; to get the ≈ symbolb . c_sum(a) - sum(a) . ≈ # alias for the `isapprox` function . ?isapprox . We can now benchmark the C code directly from Julia: . c_bench = @benchmark c_sum($a) . println(&quot;C: Fastest time was $(minimum(c_bench.times) / 1e6) msec&quot;) . d = Dict() # a &quot;dictionary&quot;, i.e. an associative array d[&quot;C&quot;] = minimum(c_bench.times) / 1e6 # in milliseconds d . using Plots gr() . using Statistics # bring in statistical support for standard deviations t = c_bench.times / 1e6 # times in milliseconds m, σ = minimum(t), std(t) histogram(t, bins=500, xlim=(m - 0.01, m + σ), xlabel=&quot;milliseconds&quot;, ylabel=&quot;count&quot;, label=&quot;&quot;) # # 2. C with -ffast-math . # If we allow C to re-arrange the floating point operations, then it&#39;ll vectorize with SIMD (single instruction, multiple data) instructions. const Clib_fastmath = tempname() # make a temporary file # The same as above but with a -ffast-math flag added open(`gcc -fPIC -O3 -msse3 -xc -shared -ffast-math -o $(Clib_fastmath * &quot;.&quot; * Libdl.dlext) -`, &quot;w&quot;) do f print(f, C_code) end # define a Julia function that calls the C function: c_sum_fastmath(X::Array{Float64}) = ccall((&quot;c_sum&quot;, Clib_fastmath), Float64, (Csize_t, Ptr{Float64}), length(X), X) . c_fastmath_bench = @benchmark $c_sum_fastmath($a) . d[&quot;C -ffast-math&quot;] = minimum(c_fastmath_bench.times) / 1e6 # in milliseconds . 3. Python&#39;s built in sum . The PyCall package provides a Julia interface to Python: . # using Pkg; Pkg.add(&quot;PyCall&quot;) using PyCall . # get the Python built-in &quot;sum&quot; function: pysum = pybuiltin(&quot;sum&quot;) . pysum(a) . pysum(a) ≈ sum(a) . py_list_bench = @benchmark $pysum($a) . d[&quot;Python built-in&quot;] = minimum(py_list_bench.times) / 1e6 d . 4. Python: numpy . Takes advantage of hardware &quot;SIMD&quot;, but only works when it works. . numpy is an optimized C library, callable from Python. It may be installed within Julia as follows: . # using Pkg; Pkg.add(&quot;Conda&quot;) using Conda . # Conda.add(&quot;numpy&quot;) . numpy_sum = pyimport(&quot;numpy&quot;)[&quot;sum&quot;] py_numpy_bench = @benchmark $numpy_sum($a) . numpy_sum(a) . numpy_sum(a) ≈ sum(a) . d[&quot;Python numpy&quot;] = minimum(py_numpy_bench.times) / 1e6 d . 5. Python, hand-written . py&quot;&quot;&quot; def py_sum(A): s = 0.0 for a in A: s += a return s &quot;&quot;&quot; sum_py = py&quot;py_sum&quot; . py_hand = @benchmark $sum_py($a) . sum_py(a) . sum_py(a) ≈ sum(a) . d[&quot;Python hand-written&quot;] = minimum(py_hand.times) / 1e6 d . 6. Julia (built-in) . Written directly in Julia, not in C! . @which sum(a) . j_bench = @benchmark sum($a) . d[&quot;Julia built-in&quot;] = minimum(j_bench.times) / 1e6 d . 7. Julia (hand-written) . function mysum(A) s = 0.0 # s = zero(eltype(a)) for a in A s += a end s end . j_bench_hand = @benchmark mysum($a) . d[&quot;Julia hand-written&quot;] = minimum(j_bench_hand.times) / 1e6 d . 8. Julia (hand-written w. simd) . function mysum_simd(A) s = 0.0 # s = zero(eltype(A)) @simd for a in A s += a end s end . j_bench_hand_simd = @benchmark mysum_simd($a) . mysum_simd(a) . d[&quot;Julia hand-written simd&quot;] = minimum(j_bench_hand_simd.times) / 1e6 d . Summary . for (key, value) in sort(collect(d), by=last) println(rpad(key, 25, &quot;.&quot;), lpad(round(value; digits=1), 6, &quot;.&quot;)) end .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/17/Julia-is-fast.html",
            "relUrl": "/2020/07/17/Julia-is-fast.html",
            "date": " • Jul 17, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Packages",
            "content": "The first time you use a package on a given Julia installation, you need to use the package manager to explicitly add it: . using Pkg Pkg.add(&quot;Example&quot;) . Updating registry at `C: Users Home .julia registries General` Updating git-repo `https://github.com/JuliaRegistries/General.git` Resolving package versions... Installed Example ─ v0.5.3 Updating `C: Users Home .julia environments v1.4 Project.toml` [7876af07] + Example v0.5.3 Updating `C: Users Home .julia environments v1.4 Manifest.toml` [7876af07] + Example v0.5.3 . . Every time you use Julia (start a new session at the REPL, or open a notebook for the first time, for example), you load the package with the using keyword . using Example . ┌ Info: Precompiling Example [7876af07-990d-54b4-ab0e-23690620f79a] └ @ Base loading.jl:1260 . In the source code of Example.jl at https://github.com/JuliaLang/Example.jl/blob/master/src/Example.jl we see the following function declared . hello(who::String) = &quot;Hello, $who&quot; . Having loaded Example, we should now be able to call hello . hello(&quot;it&#39;s me. I was wondering if after all these years you&#39;d like to meet.&quot;) . &#34;Hello, it&#39;s me. I was wondering if after all these years you&#39;d like to meet.&#34; . Now let&#39;s play with the Colors package . Pkg.add(&quot;Colors&quot;) . Resolving package versions... Updating `C: Users Home .julia environments v1.4 Project.toml` [5ae59095] + Colors v0.12.2 Updating `C: Users Home .julia environments v1.4 Manifest.toml` [3da002f7] + ColorTypes v0.10.4 [5ae59095] + Colors v0.12.2 [53c48c17] + FixedPointNumbers v0.8.1 [189a3867] + Reexport v0.2.0 . using Colors . ┌ Info: Precompiling Colors [5ae59095-9a9b-59fe-a467-6f913c188581] └ @ Base loading.jl:1260 . Let&#39;s create a palette of 100 different colors . palette = distinguishable_colors(100) . and then we can create a randomly checkered matrix using the rand command . rand(palette, 3, 3) . In the next notebook, we&#39;ll use a new package to plot datasets. . Exercises . 7.1 . Load the Primes package (source code at https://github.com/JuliaMath/Primes.jl). . Pkg.add(&quot;Primes&quot;) . Resolving package versions... Installed Primes ─ v0.5.0 Updating `C: Users Home .julia environments v1.4 Project.toml` [27ebfcd6] + Primes v0.5.0 Updating `C: Users Home .julia environments v1.4 Manifest.toml` [27ebfcd6] + Primes v0.5.0 . using Primes . ┌ Info: Precompiling Primes [27ebfcd6-29c5-5fa9-bf4b-fb8fc14df3ae] └ @ Base loading.jl:1260 . @assert @isdefined Primes . 7.2 . Verify that you can now use the function primes to grab all prime numbers under 1,000,000 and store it in variable primes_list . primes_list = primes(1000000) . 78498-element Array{Int64,1}: 2 3 5 7 11 13 17 19 23 29 31 37 41 ⋮ 999809 999853 999863 999883 999907 999917 999931 999953 999959 999961 999979 999983 . @assert primes_list == primes(1000000) .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/15/Packages.html",
            "relUrl": "/2020/07/15/Packages.html",
            "date": " • Jul 15, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Functions",
            "content": "How to declare a function . Julia gives us a few different ways to write a function. The first requires the function and end keywords . function sayhi(name) println(&quot;Hi $name, it&#39;s great to see you!&quot;) end . sayhi (generic function with 1 method) . function f(x) x^2 end . f (generic function with 1 method) . We can call either of these functions like this: . sayhi(&quot;C-3PO&quot;) . Hi C-3PO, it&#39;s great to see you! . f(42) . 1764 . Alternatively, we could have declared either of these functions in a single line . sayhi2(name) = println(&quot;Hi $name, it&#39;s great to see you!&quot;) . sayhi2 (generic function with 1 method) . f2(x) = x^2 . f2 (generic function with 1 method) . sayhi2(&quot;R2D2&quot;) . f2(42) . Finally, we could have declared these as &quot;anonymous&quot; functions . sayhi3 = name -&gt; println(&quot;Hi $name, it&#39;s great to see you!&quot;) . #3 (generic function with 1 method) . f3 = x -&gt; x^2 . #5 (generic function with 1 method) . sayhi3(&quot;Chewbacca&quot;) . Hi Chewbacca, it&#39;s great to see you! . f3(42) . 1764 . Duck-typing in Julia . &quot;If it quacks like a duck, it&#39;s a duck.&quot; Julia functions will just work on whatever inputs make sense. For example, sayhi works on the name of this minor tv character, written as an integer... . sayhi(55595472) . Hi 55595472, it&#39;s great to see you! . And f will work on a matrix. . A = rand(3, 3) A . 3×3 Array{Float64,2}: 0.712186 0.316312 0.516442 0.791034 0.880767 0.898067 0.415131 0.231459 0.398648 . f(A) . 3×3 Array{Float64,2}: 0.971813 0.623405 0.85775 1.63289 1.23383 1.55752 0.644234 0.427443 0.581178 . f will also work on a string like &quot;hi&quot; because * is defined for string inputs as string concatenation. . f(&quot;hi&quot;) . &#34;hihi&#34; . On the other hand, f will not work on a vector. Unlike A^2, which is well-defined, the meaning of v^2 for a vector, v, is not a well-defined algebraic operation. . v = rand(3) . 3-element Array{Float64,1}: 0.7732201443025144 0.796962040395248 0.002929730941968911 . f(v) . MethodError: no method matching ^(::Array{Float64,1}, ::Int64) Closest candidates are: ^(!Matched::Float16, ::Integer) at math.jl:885 ^(!Matched::Regex, ::Integer) at regex.jl:712 ^(!Matched::Missing, ::Integer) at missing.jl:155 ... Stacktrace: [1] macro expansion at . none:0 [inlined] [2] literal_pow at . none:0 [inlined] [3] f(::Array{Float64,1}) at . In[2]:2 [4] top-level scope at In[16]:1 . Mutating vs. non-mutating functions . By convention, functions followed by ! alter their contents and functions lacking ! do not. . For example, let&#39;s look at the difference between sort and sort!. . v = [3, 5, 2] . 3-element Array{Int64,1}: 3 5 2 . sort(v) . 3-element Array{Int64,1}: 2 3 5 . v . 3-element Array{Int64,1}: 3 5 2 . sort(v) returns a sorted array that contains the same elements as v, but v is left unchanged. . On the other hand, when we run sort!(v), the contents of v are sorted within the array v. . sort!(v) . v . Some higher order functions . map . map is a &quot;higher-order&quot; function in Julia that takes a function as one of its input arguments. map then applies that function to every element of the data structure you pass it. For example, executing . map(f, [1, 2, 3]) . will give you an output array where the function f has been applied to all elements of [1, 2, 3] . [f(1), f(2), f(3)] . map(f, [1, 2, 3]) . 3-element Array{Int64,1}: 1 4 9 . Here we&#39;ve squared all the elements of the vector [1, 2, 3], rather than squaring the vector [1, 2, 3]. . To do this, we could have passed to map an anonymous function rather than a named function, such as . x -&gt; x^3 . #7 (generic function with 1 method) . via . map(x -&gt; x^3, [1, 2, 3]) . 3-element Array{Int64,1}: 1 8 27 . and now we&#39;ve cubed all the elements of [1, 2, 3]! . broadcast . broadcast is another higher-order function like map. broadcast is a generalization of map, so it can do every thing map can do and more. The syntax for calling broadcast is the same as for calling map . broadcast(f, [1, 2, 3]) . 3-element Array{Int64,1}: 1 4 9 . and again, we&#39;ve applied f (squared) to all the elements of [1, 2, 3] - this time by &quot;broadcasting&quot; f! . Some syntactic sugar for calling broadcast is to place a . between the name of the function you want to broadcast and its input arguments. For example, . broadcast(f, [1, 2, 3]) . is the same as . f.([1, 2, 3]) . f.([1, 2, 3]) . 3-element Array{Int64,1}: 1 4 9 . Notice again how different this is from calling . f([1, 2, 3]) . We can square every element of a vector, but we can&#39;t square a vector! . To drive home the point, let&#39;s look at the difference between . f(A) . and . f.(A) . for a matrix A: . A = [i + 3*j for j in 0:2, i in 1:3] . 3×3 Array{Int64,2}: 1 2 3 4 5 6 7 8 9 . f(A) . 3×3 Array{Int64,2}: 30 36 42 66 81 96 102 126 150 . As before we see that for a matrix, A, . f(A) = A^2 = A * A . On the other hand, . B = f.(A) . 3×3 Array{Int64,2}: 1 4 9 16 25 36 49 64 81 . contains the squares of all the entries of A. . This dot syntax for broadcasting allows us to write relatively complex compound elementwise expressions in a way that looks natural/closer to mathematical notation. For example, we can write . A .+ 2 .* f.(A) ./ A . instead of . broadcast(x -&gt; x + 2 * f(x) / x, A) . and the two will perform exactly the same. . Exercises . 6.1 . Write a function add_one that adds 1 to its input. . add_one(x) = x+1 . add_one (generic function with 1 method) . @assert add_one(1) == 2 . @assert add_one(11) == 12 . 6.2 . Use map or broadcast to increment every element of matrix A by 1 and assign it to a variable A1. . A1 = add_one.(A) . 3×3 Array{Int64,2}: 2 3 4 5 6 7 8 9 10 . 6.3 . Use the broadcast dot syntax to increment every element of matrix A1 by 1 and store it in variable A2 . A2 = broadcast(add_one, A1) . 3×3 Array{Int64,2}: 3 4 5 6 7 8 9 10 11 . @assert A2 == [3 4 5; 6 7 8;9 10 11] .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/15/Functions.html",
            "relUrl": "/2020/07/15/Functions.html",
            "date": " • Jul 15, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Loops",
            "content": "n = 0 while n &lt; 10 n += 1 println(n) end n . 1 2 3 4 5 6 7 8 9 10 . 10 . myfriends = [&quot;Ted&quot;, &quot;Robyn&quot;, &quot;Barney&quot;, &quot;Lily&quot;, &quot;Marshall&quot;] i = 1 while i &lt;= length(myfriends) friend = myfriends[i] println(&quot;Hi $friend, it&#39;s great to see you!&quot;) i += 1 end . Hi Ted, it&#39;s great to see you! Hi Robyn, it&#39;s great to see you! Hi Barney, it&#39;s great to see you! Hi Lily, it&#39;s great to see you! Hi Marshall, it&#39;s great to see you! . for loops . The syntax for a for loop is . for *var* in *loop iterable* *loop body* end . We could use a for loop to generate the same results as either of the examples above: . for n in 1:10 println(n) end . 1 2 3 4 5 6 7 8 9 10 . myfriends = [&quot;Ted&quot;, &quot;Robyn&quot;, &quot;Barney&quot;, &quot;Lily&quot;, &quot;Marshall&quot;] for friend in myfriends println(&quot;Hi $friend, it&#39;s great to see you!&quot;) end . Hi Ted, it&#39;s great to see you! Hi Robyn, it&#39;s great to see you! Hi Barney, it&#39;s great to see you! Hi Lily, it&#39;s great to see you! Hi Marshall, it&#39;s great to see you! . Now let&#39;s use for loops to create some addition tables, where the value of every entry is the sum of its row and column indices. . First, we initialize an array with zeros. . m, n = 5, 5 A = fill(0, (m, n)) . 5×5 Array{Int64,2}: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . for i in 1:m for j in 1:n A[i, j] = i + j end end A . 5×5 Array{Int64,2}: 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9 6 7 8 9 10 . Here&#39;s some syntactic sugar for the same nested for loop . B = fill(0, (m, n)) . 5×5 Array{Int64,2}: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . for i in 1:m, j in 1:n B[i, j] = i + j end B . 5×5 Array{Int64,2}: 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9 6 7 8 9 10 . The more &quot;Julia&quot; way to create this addition table would have been with an array comprehension. . C = [i + j for i in 1:m, j in 1:n] . 5×5 Array{Int64,2}: 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9 6 7 8 9 10 . Exercises . 4.1 . Loop over integers between 1 and 100 and print their squares. . ## Code here . 4.2 . Add to the code above a bit to create a dictionary, squares that holds integers and their squares as key, value pairs such that . squares[10] == 100 . ## Add Code Here ## for i in 1:100 squares[i]= i^2 end . @assert squares[10] == 100 @assert squares[11] == 121 . 4.3 . Use an array comprehension to create an an array squares_arr that stores the squares for all integers between 1 and 100. . squares_arr = ## CODE HERE ## . syntax: incomplete: premature end of input . @assert length(squares_arr) == 100 @assert sum(squares_arr) == 338350 .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/14/Loops.html",
            "relUrl": "/2020/07/14/Loops.html",
            "date": " • Jul 14, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Data structures",
            "content": "Tuples . We can create a tuple by enclosing an ordered collection of elements in ( ). . Syntax: . (item1, item2, ...) . myfavoriteanimals = (&quot;penguins&quot;, &quot;cats&quot;, &quot;sugargliders&quot;) . (&#34;penguins&#34;, &#34;cats&#34;, &#34;sugargliders&#34;) . We can index into this tuple, . myfavoriteanimals[1] . &#34;penguins&#34; . but since tuples are immutable, we can&#39;t update it . myfavoriteanimals[1] = &quot;otters&quot; . MethodError: no method matching setindex!(::Tuple{String,String,String}, ::String, ::Int64) Stacktrace: [1] top-level scope at In[10]:1 . Now in 1.0: NamedTuples . As you might guess, NamedTuples are just like Tuples except that each element additionally has a name! They have a special syntax using = inside a tuple: . (name1 = item1, name2 = item2, ...) . myfavoriteanimals = (bird = &quot;penguins&quot;, mammal = &quot;cats&quot;, marsupial = &quot;sugargliders&quot;) . Like regular Tuples, NamedTuples are ordered, so we can retrieve their elements via indexing: . myfavoriteanimals[1] . They also add the special ability to access values by their name: . myfavoriteanimals.bird . Dictionaries . If we have sets of data related to one another, we may choose to store that data in a dictionary. We can create a dictionary using the Dict() function, which we can initialize as an empty dictionary or one storing key, value pairs. . Syntax: . Dict(key1 =&gt; value1, key2 =&gt; value2, ...) . A good example is a contacts list, where we associate names with phone numbers. . myphonebook = Dict(&quot;Jenny&quot; =&gt; &quot;867-5309&quot;, &quot;Ghostbusters&quot; =&gt; &quot;555-2368&quot;) . Dict{String,String} with 2 entries: &#34;Jenny&#34; =&gt; &#34;867-5309&#34; &#34;Ghostbusters&#34; =&gt; &#34;555-2368&#34; . In this example, each name and number is a &quot;key&quot; and &quot;value&quot; pair. We can grab Jenny&#39;s number (a value) using the associated key . myphonebook[&quot;Jenny&quot;] . &#34;867-5309&#34; . We can add another entry to this dictionary as follows . myphonebook[&quot;Kramer&quot;] = &quot;555-FILK&quot; . &#34;555-FILK&#34; . Let&#39;s check what our phonebook looks like now... . myphonebook . Dict{String,String} with 3 entries: &#34;Jenny&#34; =&gt; &#34;867-5309&#34; &#34;Kramer&#34; =&gt; &#34;555-FILK&#34; &#34;Ghostbusters&#34; =&gt; &#34;555-2368&#34; . We can delete Kramer from our contact list - and simultaneously grab his number - by using pop! . pop!(myphonebook, &quot;Kramer&quot;) . &#34;555-FILK&#34; . myphonebook . Dict{String,String} with 2 entries: &#34;Jenny&#34; =&gt; &#34;867-5309&#34; &#34;Ghostbusters&#34; =&gt; &#34;555-2368&#34; . Unlike tuples and arrays, dictionaries are not ordered. So, we can&#39;t index into them. . myphonebook[1] . KeyError: key 1 not found Stacktrace: [1] getindex(::Dict{String,String}, ::Int64) at . dict.jl:477 [2] top-level scope at In[7]:1 . In the example above, julia thinks you&#39;re trying to access a value associated with the key 1. . Arrays . Unlike tuples, arrays are mutable. Unlike dictionaries, arrays contain ordered collections. We can create an array by enclosing this collection in [ ]. . Syntax: . [item1, item2, ...] . For example, we might create an array to keep track of my friends . myfriends = [&quot;Ted&quot;, &quot;Robyn&quot;, &quot;Barney&quot;, &quot;Lily&quot;, &quot;Marshall&quot;] . 5-element Array{String,1}: &#34;Ted&#34; &#34;Robyn&#34; &#34;Barney&#34; &#34;Lily&#34; &#34;Marshall&#34; . The 1 in Array{String,1} means this is a one dimensional vector. An Array{String,2} would be a 2d matrix, etc. The String is the type of each element. . or to store a sequence of numbers . fibonacci = [1, 1, 2, 3, 5, 8, 13] . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . mixture = [1, 1, 2, 3, &quot;Ted&quot;, &quot;Robyn&quot;] . 6-element Array{Any,1}: 1 1 2 3 &#34;Ted&#34; &#34;Robyn&#34; . Once we have an array, we can grab individual pieces of data from inside that array by indexing into the array. For example, if we want the third friend listed in myfriends, we write . myfriends[3] . &#34;Barney&#34; . We can use indexing to edit an existing element of an array . myfriends[3] = &quot;Baby Bop&quot; . &#34;Baby Bop&#34; . Yes, Julia is 1-based indexing, not 0-based like Python. Wars are faught over lesser issues. I have a friend with the wisdom of Solomon who proposes settling this once and for all with ½ 😃 . We can also edit the array by using the push! and pop! functions. push! adds an element to the end of an array and pop! removes the last element of an array. . We can add another number to our fibonnaci sequence . push!(fibonacci, 21) . 8-element Array{Int64,1}: 1 1 2 3 5 8 13 21 . and then remove it . pop!(fibonacci) . 21 . fibonacci . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . So far I&#39;ve given examples of only 1D arrays of scalars, but arrays can have an arbitrary number of dimensions and can also store other arrays. For example, the following are arrays of arrays: . favorites = [[&quot;koobideh&quot;, &quot;chocolate&quot;, &quot;eggs&quot;],[&quot;penguins&quot;, &quot;cats&quot;, &quot;sugargliders&quot;]] . 2-element Array{Array{String,1},1}: [&#34;koobideh&#34;, &#34;chocolate&#34;, &#34;eggs&#34;] [&#34;penguins&#34;, &#34;cats&#34;, &#34;sugargliders&#34;] . numbers = [[1, 2, 3], [4, 5], [6, 7, 8, 9]] . 3-element Array{Array{Int64,1},1}: [1, 2, 3] [4, 5] [6, 7, 8, 9] . Below are examples of 2D and 3D arrays populated with random values. . rand(4, 3) . 4×3 Array{Float64,2}: 0.689148 0.617617 0.991503 0.867637 0.912078 0.430103 0.156068 0.0802696 0.732754 0.0923371 0.784014 0.688924 . rand(4, 3, 2) . 4×3×2 Array{Float64,3}: [:, :, 1] = 0.922505 0.22645 0.651297 0.488282 0.345696 0.519312 0.903972 0.131362 0.346508 0.0689912 0.0758148 0.391353 [:, :, 2] = 0.392975 0.14973 0.417999 0.43238 0.438699 0.501153 0.795702 0.998135 0.876675 0.791324 0.624019 0.0290969 . Be careful when you want to copy arrays! . fibonacci . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . somenumbers = fibonacci . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . somenumbers[1] = 404 . 404 . fibonacci . 7-element Array{Int64,1}: 404 1 2 3 5 8 13 . Editing somenumbers caused fibonacci to get updated as well! . In the above example, we didn&#39;t actually make a copy of fibonacci. We just created a new way to access the entries in the array bound to fibonacci. . If we&#39;d like to make a copy of the array bound to fibonacci, we can use the copy function. . # First, restore fibonacci fibonacci[1] = 1 fibonacci . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . somenumbers . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . somemorenumbers = copy(fibonacci) . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . somemorenumbers[1] = 404 . 404 . fibonacci . 7-element Array{Int64,1}: 1 1 2 3 5 8 13 . In this last example, fibonacci was not updated. Therefore we see that the arrays bound to somemorenumbers and fibonacci are distinct. . Exercises . 3.1 . Create an array, a_ray, with the following code: . a_ray = [1, 2, 3] . Add the number 4 to the end of this array and then remove it. . a_ray = [1,2,3] push!(a_ray,4) pop!(a_ray) . 4 . @assert a_ray == [1, 2, 3] . 3.2 . Try to add &quot;Emergency&quot; as key to myphonebook with the value string(911) with the following code . myphonebook[&quot;Emergency&quot;] = 100 . Why doesn&#39;t this work? . myphonebook[&quot;Emergency&quot;]=100 . UndefVarError: myphonebook not defined Stacktrace: [1] top-level scope at In[2]:1 . 3.3 . Create a new dictionary called flexible_phonebook that has Jenny&#39;s number stored as an integer and Ghostbusters&#39; number stored as a string with the following code . flexible_phonebook = Dict(&quot;Jenny&quot; =&gt; 8675309, &quot;Ghostbusters&quot; =&gt; &quot;555-2368&quot;) . flexible_phonebook = Dict(&quot;Jenny&quot; =&gt; 8675309, &quot;Ghostbusters&quot; =&gt; &quot;555-2368&quot;) . Dict{String,Any} with 2 entries: &#34;Jenny&#34; =&gt; 8675309 &#34;Ghostbusters&#34; =&gt; &#34;555-2368&#34; . @assert flexible_phonebook == Dict(&quot;Jenny&quot; =&gt; 8675309, &quot;Ghostbusters&quot; =&gt; &quot;555-2368&quot;) . 3.4 . Add the key &quot;Emergency&quot; with the value 911 (an integer) to flexible_phonebook. . flexible_phonebook[&quot;Emergency&quot;]=911 . 911 . @assert haskey(flexible_phonebook, &quot;Emergency&quot;) . @assert flexible_phonebook[&quot;Emergency&quot;] == 911 . 3.5 . Why can we add an integer as a value to flexible_phonebook but not myphonebook? How could we have initialized myphonebook so that it would accept integers as values? .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/14/Data-structures.html",
            "relUrl": "/2020/07/14/Data-structures.html",
            "date": " • Jul 14, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Installation and getting setup",
            "content": "Download Julia 1.4.2 (https://julialang.org/) . Once installed you should be able to run Julia REPL - install IJulia kernel . # From a Julia prompt using Pkg Pkg.add(&quot;IJulia&quot;) . If you want to explore nteract (an alternative to Jupyter for notebooks, https://nteract.io/kernels/julia) . This is used in julia academy tutorials which I am going through. . If not, continue to use jupyter notebooks . Strings - like Hello World! . Topics: . How to get a string | String interpolation | String concatenation | How to get a string . Enclose your characters in &quot; &quot; or &quot;&quot;&quot; &quot;&quot;&quot;! . s1 = &quot;I am a string.&quot; . &#34;I am a string.&#34; . s2 = &quot;&quot;&quot;I am also a string. &quot;&quot;&quot; . &#34;I am also a string. &#34; . There are a couple functional differences between strings enclosed in single and triple quotes. One difference is that, in the latter case, you can use quotation marks within your string. . &quot;Here, we get an &quot;error&quot; because it&#39;s ambiguous where this string ends &quot; . syntax: cannot juxtapose string literal . &quot;&quot;&quot;Look, Mom, no &quot;errors&quot;!!! &quot;&quot;&quot; . &#34;Look, Mom, no &#34;errors &#34;!!! &#34; . Note that &#39; &#39; define a character, but NOT a string! . typeof(&#39;a&#39;) . Char . &#39;We will get an error here&#39; . syntax: invalid character literal . String interpolation . We can use the $ sign to insert existing variables into a string and to evaluate expressions within a string. Below is an example that contains some highly sensitive personal information. . name = &quot;H.Roshan&quot; num_fingers = 11 num_toes = 10 . 10 . println(&quot;Hello, my name is $name.&quot;) println(&quot;I have $num_fingers fingers and $num_toes toes.&quot;) println(&quot;That is $(num_fingers + num_toes) digits in all!!&quot;) # ## String concatenation . Hello, my name is H.Roshan. I have 11 fingers and 10 toes. That is 21 digits in all!! . # Below are three ways we can concatenate strings! &lt;br&gt;&lt;br&gt; # The first way is to use the `string()` function. &lt;br&gt; # `string()` converts non-string inputs to strings. s3 = &quot;How many cats &quot;; s4 = &quot;is too many cats?&quot;; 😺 = 10 . 10 . string(s3, s4) . &#34;How many cats is too many cats?&#34; . string(&quot;I don&#39;t know, but &quot;, 😺, &quot; is too few.&quot;) . &#34;I don&#39;t know, but 10 is too few.&#34; . We can also use * for concatenation! . s3*s4 . &#34;How many cats is too many cats?&#34; . Exercises . 1 . Create a string that says &quot;hi&quot; 1000 times, first with repeat and then with the exponentiation operator, which can call * under the hood. Assign it the variable hi below. . hi = repeat( , ) . syntax: unexpected &#34;,&#34; . @assert hi == &quot;hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi&quot; . 2 . Declare two variables . a = 3 b = 4 . and use them to create two strings: . &quot;3 + 4&quot; &quot;7&quot; . and store the results in c and d respectively . @assert c == &quot;3+4&quot; @assert d == &quot;7 . AssertionError: c == &#34;3+4&#34; Stacktrace: [1] top-level scope at In[22]:1 .",
            "url": "https://aigym.github.io/aigym-workout/2020/07/13/introtojulia.html",
            "relUrl": "/2020/07/13/introtojulia.html",
            "date": " • Jul 13, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "About me . Rohit Pruthi, Decision Scientist @ Rolls Royce Data Labs . Correlation . . The number of hours put in to study is correlated to marks. Net caloric intake to weight is possibly high correlation. We can infer these because in this case causation is being discussed. However, in complex multi-variable problems, causation in not always clear. . If you have used data science or statistics earlier, you would have heard the caution &#39;Correlation is not causation&#39;. . In practice, some time correlation is not even the correct measure of dependence. We need to understand how it is defined before making use and there are some experiments in better forms of looking at dependence. The intent of this video is to look through and introduce one such example. . PPS - Predictive Power Score uses decision trees as the basis of calculation relationship between variables . A quick mention about Jupyter Notebooks which is what you are seeing right now. . Import libraries . import pandas as pd import numpy as np import seaborn as sns plt.style.use(&#39;ggplot&#39;) . Install ppscore - Predictive Power Score . !pip install ppscore . Collecting ppscore Downloading ppscore-0.0.2.tar.gz (38 kB) Building wheels for collected packages: ppscore Building wheel for ppscore (setup.py): started Building wheel for ppscore (setup.py): finished with status &#39;done&#39; Created wheel for ppscore: filename=ppscore-0.0.2-py2.py3-none-any.whl size=9634 sha256=bd3bcb391f9edd198f8fcb3c1016596ec89ff96a9add9c443947ed06cf8203fd Stored in directory: c: users home appdata local pip cache wheels bb 35 a9 b66dcda859b25d96509b26b47878164067f49ac1feb2a555ac Successfully built ppscore Installing collected packages: ppscore Successfully installed ppscore-0.0.2 . import ppscore as pps . Create data for exploration . df = pd.DataFrame() df[&quot;x&quot;] = np.random.uniform(-2, 2, 1_000_000) df[&quot;error&quot;] = np.random.uniform(-0.5, 0.5, 1_000_000) df[&quot;y&quot;] = (df[&quot;x&quot;]*df[&quot;x&quot;]) + df[&quot;error&quot;] sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9d295dc8&gt; . X and Y are obviously related, there is an exponential relationship between them. Let us see how correlation and pps handle this . Check correlation . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa1385ec8&gt; . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(method=&#39;spearman&#39;), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9d299888&gt; . sns.heatmap(df[[&#39;x&#39;,&#39;y&#39;]].corr(method=&#39;kendall&#39;), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa0cade88&gt; . The additional step of pair plotting . sns.pairplot(df[[&#39;x&#39;,&#39;y&#39;]]) . &lt;seaborn.axisgrid.PairGrid at 0x23fa0d50288&gt; . Using pps . df_matrix = pps.matrix(df[[&#39;x&#39;,&#39;y&#39;]]) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa116e3c8&gt; . Why would x vs y be 0, let us look into pps.score . ppscore.score(df, x=&#39;y&#39;, y=&#39;x&#39;, task=None, sample=5000) . {&#39;x&#39;: &#39;y&#39;, &#39;y&#39;: &#39;x&#39;, &#39;task&#39;: &#39;regression&#39;, &#39;ppscore&#39;: 0.0347825646932195, &#39;metric&#39;: &#39;mean absolute error&#39;, &#39;baseline_score&#39;: 1.0072856030153572, &#39;model_score&#39;: 0.9722496263639269, &#39;model&#39;: DecisionTreeRegressor(ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=&#39;deprecated&#39;, random_state=None, splitter=&#39;best&#39;)} . What if we flip to square root of x? . df = pd.DataFrame() df[&quot;x&quot;] = np.random.uniform(-2, 2, 1_000_000) df[&quot;error&quot;] = np.random.uniform(-0.1, 0.1, 1_000_000) df[&quot;y&quot;] = np.sqrt(abs(df[&quot;x&quot;])) + df[&quot;error&quot;] sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa122e288&gt; . df_matrix = pps.matrix(df[[&#39;x&#39;,&#39;y&#39;]]) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa126e208&gt; . Still the same 0 between y and x. . This is because of the large variation in x for a given y (see below chart and horizontal line) . sns.scatterplot(data=df, x=&#39;x&#39;, y=&#39;y&#39;).axhline(1.0) . &lt;matplotlib.lines.Line2D at 0x23fa126e988&gt; . Looking through some baseball data (source - https://www2.stetson.edu/~jrasp/research/localcorrelation.htm) . example3 = pd.read_csv(&#39;Example3.csv&#39;, header=None) . example3.columns=[&#39;Pitching&#39;, &#39;Defense&#39;, &#39;Hitting&#39;, &#39;Win Percentage&#39;] . example3.head() . Pitching Defense Hitting Win Percentage . 0 0.487013 | 3.98 | 0.975 | 0.692104 | . 1 0.402597 | 4.94 | 0.969 | 0.717472 | . 2 0.610390 | 3.90 | 0.967 | 0.809883 | . 3 0.464052 | 4.40 | 0.964 | 0.814853 | . 4 0.640523 | 3.82 | 0.965 | 0.835017 | . sns.heatmap(example3.corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f96d54488&gt; . sns.pairplot(example3) . &lt;seaborn.axisgrid.PairGrid at 0x23f98d6bcc8&gt; . sns.heatmap(pps.matrix(example3), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f992ef708&gt; . While there is high correlation score, individually neither of the variables would be able to determine the win rate. Or as the coaches say, You Gotta do one good and everything else decent. . Looking at categorical data . iris = sns.load_dataset(&#39;iris&#39;) iris.head() . sepal_length sepal_width petal_length petal_width species . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | . Can you predict the species of flower, with its parameters . sns.heatmap(iris.corr(), vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23f9bbd7348&gt; . Notice, only numerical variables get picked up in correlation, let us check with pps . df_matrix = pps.matrix(iris) sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=&quot;Blues&quot;, linewidths=0.5, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23fa7aa5b48&gt; . Better, we can see species is almost entirely predictable by petal width and length, not so much by sepal parameters . sns.pairplot(iris, hue=&#39;species&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x23f9bbd7248&gt; . That was helpful going into a model. . PPS is not a sliver bullet, and neither is correlation. In fact, there are no silver bullets, except ofcourse actual silver bullets. . Anyway, We need to use them both in conjunction to get the best outcome. . https://github.com/8080labs/ppscore Check for more details .",
            "url": "https://aigym.github.io/aigym-workout/2020/06/19/pps.html",
            "relUrl": "/2020/06/19/pps.html",
            "date": " • Jun 19, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aigym.github.io/aigym-workout/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aigym.github.io/aigym-workout/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "AI Gym is an initiative for interaction between R2DL team members on open content. This page is used to capture these interactions. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aigym.github.io/aigym-workout/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aigym.github.io/aigym-workout/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}